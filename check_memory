#!/usr/bin/python3

import optparse
import sys



def get_status(value, warn, crit):
  if value >= crit:
    return 2
  elif value >= warn:
    return 1
  return 0


def get_meminfo(mode):
  total = -1
  avail = -1
  if mode == 'MEMORY':
    keys = ['MemTotal', 'MemAvailable']
  elif mode == 'SWAP':
    keys = ['SwapTotal', 'SwapFree']
  with open('/proc/meminfo') as f:
    for line in f.read().splitlines():
      for k in keys:
        if line.startswith(f'{k}:'):
          val = int(line.split()[1]) >> 10
          if 'total' in k.lower():
            total = val
          else:
            avail = val
          keys.remove(k)
          break
      if all([v != -1 for v in [total, avail]]):
        break
  return (total, avail)


def check_avail(mode, warn, crit):
  RETURN_VALUES = ['OK', 'WARNING', 'CRITICAL', 'UNKNOWN']
  total, avail = get_meminfo(mode)
  used = total - avail
  pct = 100 - int(round(avail / total * 100, 0))
  status = get_status(pct, warn, crit)
  msg = (f'{mode} {RETURN_VALUES[status]}: {pct}% used '
         f'({used} MB out of {total} MB)')
  return (status, msg)


def main():
  if 'swap' in __file__.lower():
    mode = 'SWAP'
  else:
    mode = 'MEMORY'
  parser = optparse.OptionParser()
  parser.add_option('--warn', type='int', help='% free warning threshold')
  parser.add_option('--crit', type='int', help='% free critical threshold')
  (args, _) = parser.parse_args()
  error = ''
  if args.crit and args.warn and args.crit <= args.warn:
    error = '--warn percentage should be more than --crit percentage.'
  if not (args.crit and args.warn):
    error = 'Provide both args: --warn and --crit'
  if error:
    parser.print_help()
    parser.error(error)

  return check_avail(mode, args.warn, args.crit)


if __name__ == '__main__':
  (status, msg) = main()
  print(msg)
  sys.exit(status)
