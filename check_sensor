#!/usr/bin/python3

import json
import optparse
import subprocess
import sys


RETURN_VALUES = ['OK', 'WARNING', 'CRITICAL', 'UNKNOWN']


def get_sensor_data(metric, sensor=''):
  msg = ''
  sensor_data = {}
  return_code, out = subprocess.getstatusoutput(
      f'/usr/bin/sensors -f -j {sensor}')
  if return_code:
    msg = 'UNKNOWN: Error running /usr/bin/sensors'
  else:
    json_out = json.loads(out)
    if sensor:
      sensor_data = json_out[sensor]
    else:
      for _, data in json_out.items():
        for k, v in data.items():
          if k.lower() == 'adapter':
            continue
          if k.lower() == metric.lower() and k in sensor_data.keys():
            msg = f'UNKNOWN: Duplicate {k} found in output. --sensor required.'
            break
          sensor_data[k] = v
  if msg:
    print(msg)
    sys.exit(3)
  return sensor_data

def get_status(value, warn, crit):
  val = float(value)
  if crit > warn:
    if val >= crit:
      return 2
    elif val >= warn:
      return 1
  else:
    if val <= crit:
      return 2
    elif val <= warn:
      return 1
  return 0

def get_units(metric):
  if 'fan' in metric.lower():
    return 'RPM'
  if 'temp' in metric.lower():
    return 'Â°F'
  return ''

def main():
  parser = optparse.OptionParser()
  parser.add_option('--sensor', default='')
  parser.add_option('--metric')
  parser.add_option('--warn', type='float', default=-1.0)
  parser.add_option('--crit', type='float', default=-1.0)
  (args, _) = parser.parse_args()
  error = ''
  if (args.warn == -1 and args.crit == -1) or not args.metric:
    error = 'Provide --warn --crit and --metric'
  if args.crit and args.warn and args.crit == args.warn:
    error = '--warn and --crit should not be equal.'
  if error:
    parser.print_help()
    parser.error(error)

  data = get_sensor_data(args.metric, args.sensor)
  value = None
  remove_fahrenheit = False
  for k, v in data.items():
    if args.metric.lower() in k.lower():
      for sub_k, sub_v in v.items():
        if 'input' in sub_k:
          value = sub_v
          units = get_units(sub_k)
        if sub_v == 32:
          remove_fahrenheit = True
      if value:
        if units != 'Â°F' and remove_fahrenheit:
          value = (value - 32) * (5/9.0)
        msg = f'{value:0.1f} {units}'
        return (get_status(value, args.warn, args.crit), args.metric, msg)
  return (3, 'Wrong arguments')

if __name__ == '__main__':
  (status, metric, msg) = main()
  print(f'{metric.upper()} {RETURN_VALUES[status]}: {msg}')
  sys.exit(status)
