#!/usr/bin/python3

import argparse
import requests
import re
import sys
import traceback


REGEXES = {
    'drum': r'Drum&#32;Unit\*.*?<dd>(\d+?)%</dd>',
    'page_counter': r'<dt>Page&#32;Counter</dt><dd>(\d+?)</dd>',
    'toner': r'Toner\*\*.*?<dd>(\d+?)%</dd>',
}


def lookup(key, html):
  match = re.search(REGEXES[key], html)
  if not match:
    print(f'UNKNOWN: {key}: {url} source does not match for {REGEXES[key]}.')
    sys.exit(3)
  return int(match.group(1))


def main():
  exit_status = 0

  parser = argparse.ArgumentParser()
  parser.add_argument('host', help='Printer to check.')
  parser.add_argument('--drum-warn', help='Drum warning percent.')
  parser.add_argument('--drum-crit', help='Drum critical percent.')
  parser.add_argument('--toner-warn', help='Toner warning percent.')
  parser.add_argument('--toner-crit', help='Toner critical percent.')
  args = parser.parse_args()

  if not args.host:
    parser.error('Must specify host.')
  elif not args.drum_warn or not args.toner_warn:
    parser.error('Must specify warning levels.')
  elif not args.drum_crit or not args.toner_crit:
    parser.error('Must specify critical levels.')

  url = f'http://{args.host}/general/information.html'
  html = requests.get(url).text
  drum = lookup('drum', html)
  toner = lookup('toner', html)
  page_counter = lookup('page_counter', html)
  output = f'Drum: {drum}%, Toner: {toner}%, '
  output += f'Page counter: {lookup("page_counter", html)}.'
  if (int(args.drum_crit) >= drum or
      int(args.toner_crit) >= toner):
    output = f'CRITICAL: {output}'
    exit_status = 2
  elif (int(args.drum_warn) >= drum or
      int(args.toner_warn) >= toner):
    output = f'WARNING: {output}'
    exit_status = 1
  else:
    output = f'OK: {output}'
  print(output)
  return exit_status


if __name__ == '__main__':
  try:
    sys.exit(main())
  except Exception as e:
    traceback.print_exc()
    sys.exit(3)
